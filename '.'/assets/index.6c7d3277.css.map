{"mappings":"AE8VE,0E,oDCrQF,qD,+DC5BA,sR,2WCnBE,sFAIA,iLASE,iE,+C,6OC4CJ,8FAME,sEAIA,2DAIF,uCAGA,mFAIA,qCAGA,8C,4E,4C,2C,+CC+FE,8CAGE,yGAGA,gLAWE,iEAGF,kG,uDASE,iE,0DAMA,wIAIA,mIAGE,oD,+HClNR,iH,iDCuHA,iDAGE,+C,kECrBF,4CAGE,kDAGE,+F,4PCwBF,kDAGE,gFAGE,oD,uE,8GCjHN,sC,mVC4EI,sHAQA,+IAIA,8IAUE,4DAGF,uDAGF,sIAQE,yEAIA,oF,+J,4EC/IF,qDAGE,oLAYA,wD,yQCZA,sFAIA,kL,qD,mEbkSF,yDAGE,wDAcA,kMAOF,6EAIE,sHAKE,o3B,qiCAOA,mEAGF,6HClSF,6EAIA,+EAIF,oLAYE,wDAIF,6DAIE,4D,4Ea+FF,kDAGE,mIAKA,0EAIF,+DAGA,0GAGE,0F","sources":["assets/index.6c7d3277.css","869b0d740205f0f8","src/vue/components/ModelVisualization.vue","src/vue/components/ResetTimeoutOverlay.vue","src/vue/components/ScaledLetterbox.vue","src/vue/components/MarkerUnderlay.vue","src/vue/components/ScoreTable.vue","src/vue/components/ControlPanelTabParameterTransforms.vue","src/vue/components/ControlPanelTabRawData.vue","src/vue/components/ControlPanelTabImportExport.vue","src/vue/components/ControlPanelTabMisc.vue","src/vue/components/ControlPanel.vue","src/vue/components/ConditionalLayer.vue","src/vue/components/MarkerSlot.vue","src/vue/components/GameCard.vue","src/vue/components/CardSlot.vue","src/vue/components/App.vue"],"sourcesContent":["@keyframes highlight-cbd0da {\n  0% {\n    stroke: red;\n  }\n\n  50% {\n    stroke: gray;\n  }\n\n  100% {\n    stroke: #00f;\n  }\n}\n\n@keyframes fadeIn-4a7765 {\n  0% {\n    opacity: 0;\n  }\n\n  100% {\n    opacity: 1;\n  }\n}\n\n@keyframes fadeOut-4a7765 {\n  0% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0;\n  }\n}\n\n.outer[data-v-1237b1] {\n  width: 100%;\n  height: 100%;\n  position: relative;\n}\n\n.inner[data-v-1237b1] {\n  width: calc(1px * var(--target-width));\n  height: calc(1px * var(--target-height));\n  transform-origin: 0 0;\n  transform: translateX(calc(1px * var(--translate-x))) translateY(calc(1px * var(--translate-y))) scale(var(--scale)) translate(-50%, -50%);\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n.marker[data-v-e41848] {\n  --blur-radius: 15px;\n  --outline-width: 6px;\n  left: calc(1px * var(--marker-position-x));\n  top: calc(1px * var(--marker-position-y));\n  width: calc(1px * var(--marker-diameter));\n  height: calc(1px * var(--marker-diameter));\n  transform-origin: 0 0;\n  place-items: center;\n  font-family: sans-serif;\n  font-size: x-large;\n  display: grid;\n  position: absolute;\n  transform: translate(-50%, -50%);\n}\n\n.marker [data-v-e41848] {\n  pointer-events: none;\n  -webkit-user-select: none;\n  user-select: none;\n}\n\n.marker .circle[data-v-e41848] {\n  filter: blur(var(--blur-radius));\n  background-color: #d3d3d380;\n  border-radius: 50%;\n  outline: 6px solid #000000bf;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.marker .circle.active[data-v-e41848] {\n  background-color: #37afda80;\n}\n\n.marker-underlay[data-v-f362dc] {\n  cursor: pointer;\n}\n\n.scores[data-v-2c71d4] {\n  table-layout: fixed;\n  color: #fff;\n  text-transform: uppercase;\n  white-space: pre;\n  background-color: #e10984;\n  border-radius: 50%;\n  width: 395px;\n  height: 395px;\n  margin: 44px;\n  font-size: 20px;\n  line-height: 1.2;\n  display: table;\n  position: absolute;\n}\n\n.score-table[data-v-2c71d4] {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\ntable[data-v-2c71d4] {\n  border-collapse: separate;\n  border-spacing: 1ex .5em;\n}\n\n.header[data-v-2c71d4] {\n  padding-top: .5em;\n  padding-bottom: 1em;\n}\n\n.footer[data-v-2c71d4] {\n  padding-top: 1em;\n}\n\ntr:first-child > td[data-v-2c71d4], tr:last-child > td[data-v-2c71d4] {\n  text-align: center;\n}\n\ntd[data-v-2c71d4] {\n  vertical-align: top;\n}\n\n.score-column[data-v-2c71d4] {\n  text-align: right;\n}\n\n.score-value[data-v-2c71d4] {\n  text-align: right;\n  width: 8ex;\n  display: inline-block;\n}\n\ninput[type=\"range\"][data-v-e6343c] {\n  width: 100%;\n}\n\n.parameter-transforms {\n  gap: 2em;\n  display: flex;\n}\n\n.parameter-transforms > :first-child {\n  flex-grow: 0;\n}\n\n.parameter-transforms > :last-child {\n  flex-grow: 3;\n}\n\n.parameter-transforms > :last-child input[type=\"text\"], .parameter-transforms > :last-child textarea {\n  width: 100%;\n}\n\n.parameter-transforms .available {\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n  border: 1px solid;\n  min-width: 300px;\n  max-width: 300px;\n  min-height: 20px;\n  max-height: 900px;\n  overflow: scroll;\n}\n\n.parameter-transforms .available::-webkit-scrollbar {\n  display: none;\n}\n\n.parameter-transforms .available > div {\n  outline: 1px solid;\n  flex-wrap: nowrap;\n  padding: .2ex;\n  display: flex;\n}\n\n.parameter-transforms .available > div label {\n  flex-grow: 1;\n}\n\n.parameter-transforms .available > div label.draggable {\n  cursor: grab;\n}\n\n.parameter-transforms .available > div > * {\n  white-space: nowrap;\n}\n\n.parameter-transforms .available > div input[type=\"checkbox\"], .parameter-transforms .available > div .edit {\n  margin-left: .5ex;\n  margin-right: .5ex;\n}\n\n.parameter-transforms .available > div input[type=\"checkbox\"]:not(:disabled), .parameter-transforms .available > div .edit {\n  cursor: pointer;\n}\n\n.slot-group-transforms {\n  height: 700px;\n  overflow: scroll;\n}\n\n.container[data-v-64bba4] {\n  flex-flow: column wrap;\n  justify-content: flex-start;\n  width: 800px;\n  height: 800px;\n  margin-left: 0;\n  display: flex;\n}\n\n.preformatted[data-v-64bba4] {\n  white-space: pre;\n  width: 30%;\n  margin-bottom: 3em;\n  font-family: monospace;\n  font-size: x-small;\n}\n\n.success[data-v-e53fa3] {\n  background-color: #90ee90;\n}\n\n.unknown[data-v-e53fa3] {\n  background-color: #ffffe0;\n}\n\n.error[data-v-e53fa3] {\n  background-color: #f08080;\n}\n\n.btn[data-v-e349cb], .btn-check[data-v-e349cb] {\n  margin-bottom: .5rem;\n}\n\n.scale-factors[data-v-e349cb] {\n  display: table;\n}\n\n.scale-factors > p[data-v-e349cb] {\n  display: table-row;\n}\n\n.scale-factors > p > label[data-v-e349cb], .scale-factors > p > input[data-v-e349cb] {\n  display: table-cell;\n}\n\n.control-panel[data-v-a477ee] {\n  width: calc(1px * var(--app-width) / 4);\n  box-sizing: border-box;\n  transform-origin: 100% 0;\n  background-color: #fff;\n  border-left: 1px solid;\n  flex-direction: column;\n  height: 50%;\n  display: flex;\n  position: absolute;\n  top: 0;\n  right: 0;\n  transform: scale(2);\n}\n\n.control-panel nav[data-v-a477ee] {\n  padding-top: 1ex;\n}\n\n.control-panel nav button[disabled][data-v-a477ee] {\n  text-decoration: line-through;\n}\n\n.control-panel .tab-pane[data-v-a477ee] {\n  padding: 1em;\n}\n\n.control-panel .tab-content[data-v-a477ee] {\n  flex-grow: 2;\n  overflow: scroll;\n}\n\n.positioned-layer[data-v-34ebb7] {\n  top: calc(1px * var(--layer-y));\n  left: calc(1px * var(--layer-x));\n  position: absolute;\n}\n\n.inactive[data-v-34ebb7] {\n  display: none;\n}\n\n.slot[data-v-3b147d] {\n  left: calc(1px * var(--slot-x));\n  top: calc(1px * var(--slot-y));\n  width: calc(1px * var(--slot-diameter));\n  height: calc(1px * var(--slot-diameter));\n  transform-origin: center;\n  transform: translate(-50%, -50%) rotate(var(--slot-angle));\n  text-align: center;\n  place-items: center;\n  font-family: sans-serif;\n  font-size: x-large;\n  display: grid;\n  position: absolute;\n}\n\n.slot > .asset-container[data-v-3b147d] {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  transform: translate(0%, 50%);\n}\n\n.slot > .asset-container > img[data-v-3b147d] {\n  transform: translateX(calc(1px * var(--asset-x))) translateY(calc(1px * var(--asset-y)));\n  position: absolute;\n}\n\n.slot > .circle[data-v-3b147d] {\n  box-sizing: content-box;\n  border-radius: 50%;\n  outline: 2px solid;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n.slot > .circle.inactive[data-v-3b147d] {\n  outline-color: #a9a9a9;\n}\n\n.slot > .circle.active[data-v-3b147d] {\n  outline-color: #000;\n}\n\n.slot .label[data-v-3b147d] {\n  text-align: left;\n  text-transform: uppercase;\n  white-space: pre-line;\n  color: #000;\n  font-size: 20px;\n  position: absolute;\n}\n\n.slot .dev-label[data-v-3b147d] {\n  background-color: #fffa;\n  position: absolute;\n}\n\n.slot [data-v-3b147d] {\n  pointer-events: none;\n  -webkit-user-select: none;\n  user-select: none;\n}\n\n.action-card[data-v-2b98cf] {\n  --inactive-card-filter: invert(1) brightness(.4) invert(1);\n  left: calc(1px * var(--card-x));\n  top: calc(1px * var(--card-y));\n  position: absolute;\n}\n\n.action-card[data-v-2b98cf]:not(.active) {\n  filter: var(--inactive-card-filter);\n}\n\n.action-card .image[data-v-2b98cf] {\n  position: relative;\n}\n\n.action-card .label[data-v-2b98cf] {\n  text-align: center;\n  place-items: center;\n  width: 100%;\n  height: 100%;\n  font-family: sans-serif;\n  font-size: x-large;\n  display: grid;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n.action-card .highlight[data-v-2b98cf] {\n  background: #fff7;\n}\n\n.card-slot[data-v-530460] {\n  transform-origin: 0 0;\n  --card-x-px: calc(1px * var(--card-x));\n  --card-y-px: calc(1px * var(--card-y));\n  transform: translateX(var(--card-x-px)) translateY(var(--card-y-px)) rotate(calc(1deg * var(--card-angle)));\n  width: 220px;\n  height: 300px;\n  position: absolute;\n}\n\n.card-slot.dev-mode[data-v-530460] {\n  background-color: #ffffff80;\n  outline: 2px dotted gray;\n}\n\n.card-slot > .label[data-v-530460] {\n  text-align: center;\n  place-items: center;\n  width: 100%;\n  height: 100%;\n  font-family: sans-serif;\n  font-size: x-large;\n  display: grid;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n.model-visualization[data-v-cbd0da] {\n  overflow: visible;\n}\n\n.model-visualization .stock[data-v-cbd0da] {\n  stroke: none;\n  opacity: .75;\n}\n\n.model-visualization .supply[data-v-cbd0da] {\n  fill: #d3d3d3;\n}\n\n.model-visualization .capacity[data-v-cbd0da] {\n  fill: gray;\n}\n\n.model-visualization .flow[data-v-cbd0da] {\n  stroke-linecap: round;\n  stroke-linejoin: round;\n  animation: 100s linear calc(-100s * var(--highlight)) paused highlight-cbd0da;\n  fill: none;\n  animation-fill-mode: both;\n}\n\n.model-visualization .flow.edge[data-v-cbd0da] {\n  stroke-width: 8px;\n  display: none;\n}\n\n.model-visualization .flow.anim-edge[data-v-cbd0da] {\n  stroke-width: 15px;\n  stroke-dasharray: 10 27;\n  --max-dashoffset-step: 15;\n}\n\n.model-visualization .flow#recycle-flow[data-v-cbd0da], .model-visualization .flow#recycle-edge[data-v-cbd0da], .model-visualization .flow#produce-from-recycled-materials-flow[data-v-cbd0da], .model-visualization .flow#produce-from-recycled-materials-edge[data-v-cbd0da], .model-visualization .flow#repair-flow[data-v-cbd0da], .model-visualization .flow#repair-edge[data-v-cbd0da], .model-visualization .flow#acquire-repaired-flow[data-v-cbd0da], .model-visualization .flow#acquire-repaired-edge[data-v-cbd0da], .model-visualization .flow#refurbish-flow[data-v-cbd0da], .model-visualization .flow#refurbish-edge[data-v-cbd0da], .model-visualization .flow#acquire-refurbished-flow[data-v-cbd0da], .model-visualization .flow#acquire-refurbished-edge[data-v-cbd0da], .model-visualization .flow#acquire-used-flow[data-v-cbd0da], .model-visualization .flow#acquire-used-edge[data-v-cbd0da] {\n  stroke: gray;\n}\n\n.model-visualization .flow#recycle-flow.anim-edge[data-v-cbd0da], .model-visualization .flow#recycle-edge.anim-edge[data-v-cbd0da], .model-visualization .flow#produce-from-recycled-materials-flow.anim-edge[data-v-cbd0da], .model-visualization .flow#produce-from-recycled-materials-edge.anim-edge[data-v-cbd0da], .model-visualization .flow#repair-flow.anim-edge[data-v-cbd0da], .model-visualization .flow#repair-edge.anim-edge[data-v-cbd0da], .model-visualization .flow#acquire-repaired-flow.anim-edge[data-v-cbd0da], .model-visualization .flow#acquire-repaired-edge.anim-edge[data-v-cbd0da], .model-visualization .flow#refurbish-flow.anim-edge[data-v-cbd0da], .model-visualization .flow#refurbish-edge.anim-edge[data-v-cbd0da], .model-visualization .flow#acquire-refurbished-flow.anim-edge[data-v-cbd0da], .model-visualization .flow#acquire-refurbished-edge.anim-edge[data-v-cbd0da], .model-visualization .flow#acquire-used-flow.anim-edge[data-v-cbd0da], .model-visualization .flow#acquire-used-edge.anim-edge[data-v-cbd0da] {\n  stroke-dasharray: 0 27;\n  --max-dashoffset-step: 12.5;\n}\n\n.model-visualization foreignObject[data-v-cbd0da] {\n  overflow: visible;\n}\n\n.model-visualization .label[data-v-cbd0da] {\n  text-anchor: middle;\n  dominant-baseline: middle;\n  font-family: sans-serif;\n  font-size: 48px;\n}\n\n.fade-in[data-v-4a7765] {\n  opacity: 1;\n  animation: 1s linear forwards fadeIn-4a7765;\n}\n\n.fade-out[data-v-4a7765] {\n  opacity: 1;\n  animation: 1s linear forwards fadeOut-4a7765;\n}\n\n.reset-timeout-panel[data-v-4a7765] {\n  background-color: #fffc;\n  flex-direction: column;\n  justify-content: center;\n  gap: 30px;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n.title[data-v-4a7765] {\n  text-align: center;\n  font-size: 128px;\n}\n\n.description[data-v-4a7765] {\n  text-align: center;\n  font-size: 64px;\n}\n\n.countdown[data-v-4a7765] {\n  text-align: center;\n  font-size: 256px;\n}\n\n.app-background[data-v-23f400] {\n  background-color: #000;\n  width: 100%;\n  height: 100%;\n}\n\n.layer-panel[data-v-23f400] {\n  background-color: #fff;\n}\n\n.model-visualization[data-v-23f400] {\n  width: calc(1px * var(--svg-width));\n  transform: scale(var(--svg-scale-factor));\n  transform-origin: 0 0;\n}\n\n.slot-panel[data-v-23f400], .marker-panel[data-v-23f400] {\n  touch-action: none;\n}\n\n.pointer-events-fallthrough[data-v-23f400] {\n  pointer-events: none;\n}\n\n.score[data-v-23f400], .score-bottom-right[data-v-23f400], .score-top-left[data-v-23f400] {\n  position: absolute;\n}\n\n.score-top-left[data-v-23f400] {\n  transform-origin: center;\n  top: 0;\n  left: 0;\n  transform: rotate(180deg);\n}\n\n.score-bottom-right[data-v-23f400] {\n  bottom: 0;\n  right: 0;\n}\n/*# sourceMappingURL=index.6c7d3277.css.map */\n","@import \"d718d64a9e189ad7\";\n@import \"e9db3caaf078d42b\";\n@import \"5100861d807143cb\";\n@import \"979de8b543a8b46a\";\n@import \"0e19a8b66b192c49\";\n@import \"a6de3dd6d9112598\";\n@import \"6120a7ed7ff4ece9\";\n@import \"ff49f7e60f0e3a3b\";\n@import \"e13c796f83b78715\";\n@import \"9faa9d21119178cf\";\n@import \"c8364f43a0d6c3b9\";\n@import \"a37a1ea91e5ce77b\";\n@import \"b50c7987d3be007c\";\n@import \"e8f85e180decbdf1\";\n@import \"99d2025a75b4422d\";\n@import \"25533019bdf4d858\";\n@import \"a9b2cdc35cd396f7\";\n@import \"951bdde8bef52012\";\n@import \"cad2cce0dd604c1d\";\n@import \"6b470d7514635d78\";\n@import \"a4e0fbdff145ab70\";\n@import \"4602e0f18243ad46\";\n@import \"3acb44b13c93903d\";\n@import \"63f5a027105c94a5\";\n@import \"ca6ea4bbf6096c9f\";\n@import \"8f3004ae8d75a25e\";\n@import \"8e9119abd0561dfb\";\n@import \"104b6b160633f2d1\";\n@import \"282e0eecaeeb2db3\";\n@import \"34469b62c4744a31\";\n@import \"6fa5b5086499497a\";\n@import \"6014ff0a7f3b728a\";\n@import \"147ccb26f510b60d\";\n@import \"3d0f1a6ce00fdcce\";\n","<script setup lang=\"ts\">\r\nimport type { ElementOf } from 'ts-essentials';\r\n\r\nimport { strict as assert } from 'assert';\r\nimport kebabCase from 'lodash/kebabCase';\r\nimport camelCase from 'lodash/camelCase';\r\nimport clamp from 'lodash/clamp';\r\nimport { onMounted, ref, computed } from 'vue';\r\nimport { toReactive } from '@vueuse/core';\r\nimport { v4 as uuid4 } from 'uuid';\r\nimport { storeToRefs } from 'pinia';\r\n\r\nimport type { ModelElementObject } from '../../ts/model';\r\nimport { type Record, type StockId } from '../../ts/circular-economy-model';\r\n\r\nimport { BOARD_WIDTH, BOARD_HEIGHT } from '../../ts/builtin-config';\r\nimport { useAppStore } from '../../ts/stores/app';\r\nimport { useModelStore } from '../../ts/stores/model';\r\nimport { useVisualizationStore } from '../../ts/stores/visualization';\r\nimport { stockIds } from '../../ts/circular-economy-model';\r\nimport { loadSvg } from '../../ts/util/load-svg';\r\nimport { getCircleCenter } from '../../ts/util/geometry/svg';\r\nimport { guardedQuerySelector } from '../../ts/util/guarded-query-selectors';\r\n\r\nconst svgUrl = new URL('../../svg/model.svg', import.meta.url);\r\nconst uuid = uuid4();\r\n\r\nconst mainFlowIds = [\r\n  'abandon',\r\n  'acquireNewlyProduced',\r\n  'acquireRefurbished',\r\n  'acquireRepaired',\r\n  'acquireUsed',\r\n  'disposeBroken',\r\n  'disposeHibernating',\r\n  'goBroken',\r\n  'landfill',\r\n  'produceFromNaturalResources',\r\n  'produceFromRecycledMaterials',\r\n  'recycle',\r\n  'refurbish',\r\n  'repair',\r\n] as const;\r\n\r\nconst mainCapacityIds = [\r\n  'recycledMaterials',\r\n  'repairedPhones',\r\n  'refurbishedPhones',\r\n  'newlyProducedPhones',\r\n  'phonesInUse',\r\n] as const;\r\n\r\nconst mainSupplyIds = [\r\n  'recycledMaterials',\r\n  'hibernatingPhones',\r\n  'disposedPhones',\r\n  'brokenPhones',\r\n  'repairedPhones',\r\n  'refurbishedPhones',\r\n  'newlyProducedPhones',\r\n] as const;\r\n\r\nconst additionalVerbatimSupplyIds = ['phonesInUse'] as const;\r\n\r\nconst stockIdsMap = {\r\n  capacity: mainCapacityIds,\r\n  supply: mainSupplyIds,\r\n  verbatim: additionalVerbatimSupplyIds,\r\n} as const;\r\n\r\ntype MainFlowIds = typeof mainFlowIds;\r\ntype MainFlowId = ElementOf<MainFlowIds>;\r\n\r\nconst flowVizSigns: ModelElementObject<MainFlowIds> = {\r\n  abandon: +1,\r\n  acquireNewlyProduced: -1,\r\n  acquireRefurbished: -1,\r\n  acquireRepaired: -1,\r\n  acquireUsed: -1,\r\n  disposeBroken: -1,\r\n  disposeHibernating: -1,\r\n  goBroken: -1,\r\n  landfill: -1,\r\n  produceFromNaturalResources: -1,\r\n  produceFromRecycledMaterials: -1,\r\n  recycle: -1,\r\n  refurbish: -1,\r\n  repair: -1,\r\n} as const;\r\n\r\nconst svgPromise = loadSvg(svgUrl);\r\n\r\nconst appStore = useAppStore();\r\n\r\nconst modelStore = useModelStore();\r\n\r\nconst visualizationStore = useVisualizationStore();\r\nconst { scaleFactors } = storeToRefs(visualizationStore);\r\n\r\nconst updateInfo = ref({\r\n  deltaMs: 0,\r\n  stepSize: 0,\r\n  flowVizScale: 1,\r\n  stockVizScale: 1,\r\n  record: modelStore.record,\r\n});\r\n\r\ninterface StockDescription {\r\n  readonly id: string;\r\n  readonly x: number;\r\n  readonly y: number;\r\n  radius: number;\r\n  highlight: number;\r\n}\r\n\r\ninterface FlowDescription {\r\n  readonly id: string;\r\n  readonly svgPath: string;\r\n  dashOffset: number;\r\n  highlight: number;\r\n}\r\n\r\nconst useStockToRadius = (stockId: StockId) => {\r\n  const radius = computed(() => {\r\n    const { record } = updateInfo.value;\r\n    const { stocks } = record;\r\n    const stock = stocks[stockId];\r\n    const { stockVizScale } = updateInfo.value;\r\n    return Math.sqrt((stock * stockVizScale) / Math.PI);\r\n  });\r\n  return { radius };\r\n};\r\n\r\nconst useFlowToDashoffset = (flowId: MainFlowId) => {\r\n  let lastDashOffset = 0;\r\n  const dashoffset = computed(() => {\r\n    const { deltaMs, flowVizScale, record } = updateInfo.value;\r\n    const { flows } = record;\r\n    const flow = flows[flowId];\r\n    const flowVizSign = flowVizSigns[flowId];\r\n\r\n    // The dash offset step must not be small compared to the dash gap.\r\n    // Otherwise, the flow animation may appear to move backwards.\r\n    const maxStep = 10; // TODO: Make this configurable\r\n    const dashOffsetStep =\r\n      flowVizSign * Math.min(deltaMs * flowVizScale * flow, maxStep);\r\n    const dashOffset =\r\n      (Number.isNaN(lastDashOffset) ? 0 : lastDashOffset) + dashOffsetStep;\r\n    lastDashOffset = dashOffset;\r\n    return dashOffset;\r\n  });\r\n  return { dashoffset };\r\n};\r\n\r\nconst useFlowToHighlight = (flowId: MainFlowId) => {\r\n  let previousFlow = updateInfo.value.record.flows[flowId];\r\n  const highlight = computed(() => {\r\n    // TODO: fine-tune formula\r\n    const { flowVizScale, record, stepSize } = updateInfo.value;\r\n    const flow = record.flows[flowId];\r\n    const flowDerivative = (flow - previousFlow) / stepSize;\r\n    const scaledFlowDerivative =\r\n      scaleFactors.value.flowHighlight * flowVizScale * flowDerivative;\r\n    const mappedFlowDerivative =\r\n      Math.sign(scaledFlowDerivative) *\r\n      Math.sqrt(Math.abs(scaledFlowDerivative));\r\n    const result = clamp((1 + mappedFlowDerivative) / 2, 0, 1);\r\n    previousFlow = flow;\r\n    return appStore.highlightDerivatives && !Number.isNaN(result)\r\n      ? result\r\n      : 0.5;\r\n  });\r\n  return { highlight };\r\n};\r\n\r\nconst extractFlowDescriptions = (svgElement: SVGElement): FlowDescription[] =>\r\n  mainFlowIds.map((id) => {\r\n    const flowElement = guardedQuerySelector(\r\n      SVGGeometryElement,\r\n      `#${kebabCase(id)}`,\r\n      svgElement,\r\n    );\r\n    const svgPath = flowElement.getAttribute('d');\r\n    assert(svgPath !== null, `SVG path for flow ${id} not found.`);\r\n    const flowDescription: FlowDescription = toReactive({\r\n      id,\r\n      svgPath,\r\n      dashOffset: useFlowToDashoffset(id).dashoffset,\r\n      highlight: useFlowToHighlight(id).highlight,\r\n    });\r\n    return flowDescription;\r\n  });\r\n\r\nconst extractStockDescriptions = (\r\n  svgElement: SVGElement,\r\n  type: keyof typeof stockIdsMap,\r\n): StockDescription[] => {\r\n  const mainStockIds = stockIdsMap[type];\r\n  return mainStockIds.map((mainId) => {\r\n    const stockElement = guardedQuerySelector(\r\n      SVGGeometryElement,\r\n      `#${kebabCase(mainId)}`,\r\n      svgElement,\r\n    );\r\n    assert(stockElement.tagName === 'circle');\r\n    const { x, y } = getCircleCenter(stockElement as SVGCircleElement);\r\n    const id = (\r\n      type === 'verbatim'\r\n        ? mainId\r\n        : camelCase(`${type}-of-${kebabCase(mainId)}`)\r\n    ) as StockId;\r\n    assert(\r\n      stockIds.includes(id),\r\n      `${id} is no valid stockId (${stockIds.join(', ')})`,\r\n    );\r\n    const stockDescription: StockDescription = toReactive({\r\n      id,\r\n      x,\r\n      y,\r\n      radius: useStockToRadius(id).radius,\r\n      highlight: 0,\r\n    });\r\n    return stockDescription;\r\n  });\r\n};\r\n\r\nconst capacityDescriptions = ref<StockDescription[]>([]);\r\nconst supplyDescriptions = ref<StockDescription[]>([]);\r\nconst flowDescriptions = ref<FlowDescription[]>([]);\r\n\r\nconst flowElements = ref<SVGPathElement[]>([]);\r\nconst supplyElements = ref<SVGCircleElement[]>([]);\r\n\r\nonMounted(() => {\r\n  void svgPromise.then((svg) => {\r\n    flowDescriptions.value.push(...extractFlowDescriptions(svg));\r\n    capacityDescriptions.value.push(\r\n      ...extractStockDescriptions(svg, 'capacity'),\r\n    );\r\n    supplyDescriptions.value.push(\r\n      ...extractStockDescriptions(svg, 'supply'),\r\n      ...extractStockDescriptions(svg, 'verbatim'),\r\n    );\r\n  });\r\n});\r\n\r\nconst update = (\r\n  deltaMs: DOMHighResTimeStamp,\r\n  stepSize: number,\r\n  record: Record,\r\n) => {\r\n  const flowVizScale =\r\n    scaleFactors.value.flow / record.parameters.numberOfUsers;\r\n  const stockVizScale =\r\n    scaleFactors.value.stock / record.parameters.numberOfUsers;\r\n  updateInfo.value = { deltaMs, stepSize, flowVizScale, stockVizScale, record };\r\n};\r\n\r\ndefineExpose({ update });\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    ref=\"container\"\r\n    class=\"model-viz-container\"\r\n    :style=\"{\r\n      '--dev-mode-label-display': appStore.isDeveloperModeActive\r\n        ? 'inline'\r\n        : 'none',\r\n    }\"\r\n  >\r\n    <svg\r\n      :width=\"BOARD_WIDTH\"\r\n      :height=\"BOARD_HEIGHT\"\r\n      :viewBox=\"`0 0 ${BOARD_WIDTH} ${BOARD_HEIGHT}`\"\r\n      xml:space=\"preserve\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      class=\"model-visualization\"\r\n    >\r\n      <path\r\n        v-for=\"flowDescription in flowDescriptions\"\r\n        :key=\"flowDescription.id\"\r\n        :id=\"`${flowDescription.id}-${uuid}`\"\r\n        ref=\"flowElements\"\r\n        :data-label=\"flowDescription.id\"\r\n        :d=\"flowDescription.svgPath\"\r\n        :stroke-dashoffset=\"flowDescription.dashOffset\"\r\n        class=\"flow anim-edge\"\r\n        :style=\"{\r\n          '--highlight': flowDescription.highlight,\r\n        }\"\r\n      />\r\n      <circle\r\n        v-for=\"stockDescription in capacityDescriptions\"\r\n        :key=\"stockDescription.id\"\r\n        :cx=\"stockDescription.x\"\r\n        :cy=\"stockDescription.y\"\r\n        :r=\"stockDescription.radius\"\r\n        class=\"stock capacity\"\r\n      />\r\n      <circle\r\n        v-for=\"stockDescription in supplyDescriptions\"\r\n        :key=\"stockDescription.id\"\r\n        :id=\"`${stockDescription.id}-${uuid}`\"\r\n        ref=\"supplyElements\"\r\n        :data-label=\"stockDescription.id\"\r\n        :cx=\"stockDescription.x\"\r\n        :cy=\"stockDescription.y\"\r\n        :r=\"stockDescription.radius\"\r\n        class=\"stock supply\"\r\n      />\r\n      <template v-if=\"appStore.isDeveloperModeActive\">\r\n        <text v-for=\"flowElement in flowElements\" :key=\"flowElement.id\">\r\n          <textPath\r\n            :xlink:href=\"`#${flowElement.id}`\"\r\n            startOffset=\"50%\"\r\n            text-anchor=\"middle\"\r\n            dominant-baseline=\"middle\"\r\n            class=\"label\"\r\n          >\r\n            {{ flowElement.dataset.label }}\r\n          </textPath>\r\n        </text>\r\n        <text\r\n          v-for=\"supplyElement in supplyElements\"\r\n          :key=\"supplyElement.id\"\r\n          :x=\"supplyElement.getAttribute('cx')\"\r\n          :y=\"supplyElement.getAttribute('cy')\"\r\n          class=\"label\"\r\n        >\r\n          {{ supplyElement.dataset.label }}\r\n        </text>\r\n      </template>\r\n    </svg>\r\n  </div>\r\n</template>\r\n\r\n<style scoped lang=\"scss\">\r\n.model-visualization {\r\n  overflow: visible;\r\n\r\n  .stock {\r\n    stroke: none;\r\n    opacity: 0.75;\r\n  }\r\n\r\n  .supply {\r\n    fill: lightgray;\r\n  }\r\n\r\n  .capacity {\r\n    fill: gray;\r\n  }\r\n\r\n  @keyframes highlight {\r\n    0% {\r\n      stroke: red;\r\n    }\r\n\r\n    50% {\r\n      stroke: gray;\r\n    }\r\n\r\n    100% {\r\n      stroke: blue;\r\n    }\r\n  }\r\n\r\n  .flow {\r\n    stroke-linecap: round;\r\n    stroke-linejoin: round;\r\n    animation: 100s linear calc(-100s * var(--highlight)) paused highlight;\r\n    animation-fill-mode: both;\r\n\r\n    fill: none;\r\n\r\n    &.edge {\r\n      stroke-width: 8;\r\n      display: none;\r\n    }\r\n\r\n    &.anim-edge {\r\n      stroke-width: 15;\r\n      stroke-dasharray: 10 27;\r\n      --max-dashoffset-step: 15; // string must be parseable by parseFloat()\r\n    }\r\n\r\n    &#recycle-flow,\r\n    &#recycle-edge,\r\n    &#produce-from-recycled-materials-flow,\r\n    &#produce-from-recycled-materials-edge,\r\n    &#repair-flow,\r\n    &#repair-edge,\r\n    &#acquire-repaired-flow,\r\n    &#acquire-repaired-edge,\r\n    &#refurbish-flow,\r\n    &#refurbish-edge,\r\n    &#acquire-refurbished-flow,\r\n    &#acquire-refurbished-edge,\r\n    &#acquire-used-flow,\r\n    &#acquire-used-edge {\r\n      stroke: gray;\r\n\r\n      &.anim-edge {\r\n        stroke-dasharray: 0 27;\r\n        --max-dashoffset-step: 12.5; // string must be parseable by parseFloat()\r\n      }\r\n    }\r\n  }\r\n\r\n  foreignObject {\r\n    overflow: visible;\r\n  }\r\n\r\n  .label {\r\n    font-size: 48px;\r\n    font-family: sans-serif;\r\n    text-anchor: middle;\r\n    dominant-baseline: middle;\r\n  }\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { ref, watch, onMounted, onUnmounted } from 'vue';\r\nimport { useIntervalFn } from '@vueuse/core';\r\n\r\nimport { useConfigStore } from '../../ts/stores/config';\r\nimport { useModelStore } from '../../ts/stores/model';\r\nimport { compile } from '../../ts/util/record-condition';\r\n\r\nconst { config, getPrimary, getSecondary } = useConfigStore();\r\nconst { autoReset: autoResetConfig } = config.general;\r\nconst modelStore = useModelStore();\r\n\r\nconst remainingSeconds = ref(-1);\r\n\r\nconst resetCondition = compile(autoResetConfig.condition);\r\n\r\nlet unwatch = () => {};\r\nlet stopCountdown = () => {};\r\n\r\nfunction watchModel() {\r\n  unwatch = watch(modelStore.record, (record) => {\r\n    if (resetCondition(record)) {\r\n      unwatch();\r\n      remainingSeconds.value = Math.round(autoResetConfig.timeoutSeconds);\r\n      stopCountdown = useIntervalFn(() => {\r\n        remainingSeconds.value -= 1;\r\n        switch (remainingSeconds.value) {\r\n          case 0:\r\n            modelStore.reset();\r\n            break;\r\n          case -1:\r\n            stopCountdown();\r\n            watchModel();\r\n            break;\r\n          default:\r\n            // do nothing\r\n            break;\r\n        }\r\n      }).pause;\r\n    }\r\n  });\r\n}\r\n\r\nonMounted(watchModel);\r\n\r\nonUnmounted(() => {\r\n  unwatch();\r\n  stopCountdown();\r\n  remainingSeconds.value = -1;\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    v-if=\"remainingSeconds > -1\"\r\n    class=\"reset-timeout-panel\"\r\n    :class=\"{\r\n      'fade-in': remainingSeconds > 0,\r\n      'fade-out': remainingSeconds <= 0,\r\n    }\"\r\n  >\r\n    <div class=\"title\">\r\n      <div class=\"primary-text\">\r\n        {{ getPrimary(autoResetConfig.title).value }}\r\n      </div>\r\n      <div class=\"secondary-text\">\r\n        {{ getSecondary(autoResetConfig.title).value }}\r\n      </div>\r\n    </div>\r\n    <div class=\"countdown\">{{ Math.max(0, remainingSeconds) }}</div>\r\n    <div class=\"description\">\r\n      <div class=\"primary-text\">\r\n        {{ getPrimary(autoResetConfig.description).value }}\r\n      </div>\r\n      <div class=\"secondary-text\">\r\n        {{ getSecondary(autoResetConfig.description).value }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped lang=\"scss\">\r\n@keyframes fadeIn {\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n}\r\n\r\n@keyframes fadeOut {\r\n  0% {\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n.fade-in {\r\n  opacity: 1;\r\n  animation: fadeIn 1s linear forwards;\r\n}\r\n\r\n.fade-out {\r\n  opacity: 1;\r\n  animation: fadeOut 1s linear forwards;\r\n}\r\n\r\n.reset-timeout-panel {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: #fffc;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  gap: 30px;\r\n}\r\n\r\n.title {\r\n  font-size: 128px;\r\n  text-align: center;\r\n}\r\n\r\n.description {\r\n  font-size: 64px;\r\n  text-align: center;\r\n}\r\n\r\n.countdown {\r\n  font-size: 256px;\r\n  text-align: center;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { strict as assert } from 'assert';\r\nimport { ref, onMounted, onUnmounted } from 'vue';\r\n\r\nconst props = defineProps<{ targetSize: { width: number; height: number } }>();\r\nconst emit = defineEmits<{\r\n  resize: [scale: number];\r\n}>();\r\n\r\nconst outerElement = ref<HTMLDivElement | null>(null);\r\nconst innerElement = ref<HTMLDivElement | null>(null);\r\n\r\nconst transformInfo = ref({ translateX: 0, translateY: 0, scale: 1 });\r\n\r\nonMounted(() => {\r\n  assert(outerElement.value !== null);\r\n  const outerElementValue = outerElement.value;\r\n\r\n  const handleResize = () => {\r\n    const rect = outerElementValue.getBoundingClientRect();\r\n    const scale = Math.min(\r\n      rect.width / props.targetSize.width,\r\n      rect.height / props.targetSize.height,\r\n    );\r\n    transformInfo.value = {\r\n      translateX: rect.width / 2,\r\n      translateY: rect.height / 2,\r\n      scale,\r\n    };\r\n    emit('resize', scale);\r\n  };\r\n  const observer = new ResizeObserver(handleResize);\r\n  observer.observe(outerElementValue);\r\n  handleResize();\r\n  onUnmounted(() => observer.disconnect());\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div ref=\"outerElement\" class=\"outer\">\r\n    <div\r\n      ref=\"innerElement\"\r\n      class=\"inner\"\r\n      :style=\"{\r\n        '--target-width': props.targetSize.width,\r\n        '--target-height': props.targetSize.height,\r\n        '--translate-x': transformInfo.translateX,\r\n        '--translate-y': transformInfo.translateY,\r\n        '--scale': transformInfo.scale,\r\n      }\"\r\n    >\r\n      <slot></slot>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped lang=\"scss\">\r\n.outer {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.inner {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: calc(1px * var(--target-width));\r\n  height: calc(1px * var(--target-height));\r\n  transform-origin: top left;\r\n  transform: translateX(calc(1px * var(--translate-x)))\r\n    translateY(calc(1px * var(--translate-y))) scale(var(--scale))\r\n    translate(-50%, -50%);\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { MARKER_CIRCLE_DIAMETER } from '../../ts/builtin-config';\r\nimport { useAppStore } from '../../ts/stores/app';\r\n\r\nconst appStore = useAppStore();\r\n\r\nconst props = defineProps<{\r\n  readonly markerId: string;\r\n  x: number;\r\n  y: number;\r\n}>();\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    class=\"marker\"\r\n    :style=\"{\r\n      '--marker-position-x': props.x,\r\n      '--marker-position-y': props.y,\r\n      '--marker-diameter': MARKER_CIRCLE_DIAMETER,\r\n    }\"\r\n  >\r\n    <div class=\"circle\"></div>\r\n    <span v-if=\"appStore.isDeveloperModeActive\">{{ props.markerId }}</span>\r\n  </div>\r\n</template>\r\n\r\n<style scoped lang=\"scss\">\r\n.marker {\r\n  --blur-radius: 15px;\r\n  --outline-width: 6px;\r\n  position: absolute;\r\n  left: calc(1px * var(--marker-position-x));\r\n  top: calc(1px * var(--marker-position-y));\r\n  width: calc(1px * var(--marker-diameter));\r\n  height: calc(1px * var(--marker-diameter));\r\n  transform-origin: top left;\r\n  transform: translate(-50%, -50%);\r\n\r\n  * {\r\n    pointer-events: none;\r\n    user-select: none;\r\n  }\r\n\r\n  display: grid;\r\n  place-items: center center;\r\n  font-family: sans-serif;\r\n  font-size: x-large;\r\n\r\n  .circle {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    border-radius: 50%;\r\n    background-color: rgb(211 211 211 / 50%);\r\n    outline: 6px solid rgb(0 0 0 / 75%);\r\n    filter: blur(var(--blur-radius));\r\n\r\n    &.active {\r\n      background-color: rgb(55 175 218 / 50%);\r\n    }\r\n  }\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport type { ElementOf } from 'ts-essentials';\r\nimport type { Ref } from 'vue';\r\n\r\nimport { computed } from 'vue';\r\n\r\nimport { useConfigStore } from '../../ts/stores/config';\r\nimport { useModelStore } from '../../ts/stores/model';\r\nimport { Scores } from '../../ts/scores';\r\n\r\nconst {\r\n  config: { general },\r\n  getPrimary,\r\n  getSecondary,\r\n} = useConfigStore();\r\nconst { description, scoreLabels } = general;\r\n\r\nconst modelStore = useModelStore();\r\n\r\ninterface ScoreInfo {\r\n  id: string;\r\n  score: Ref<number>;\r\n  primaryLabel: Ref<string>;\r\n  secondaryLabel: Ref<string>;\r\n}\r\n\r\nconst scoreIds = ['circularity', 'coverage'] as const;\r\n\r\nfunction createScoreInfo(id: ElementOf<typeof scoreIds>): ScoreInfo {\r\n  return {\r\n    id,\r\n    score: computed(() => Scores[id](modelStore.record)),\r\n    primaryLabel: getPrimary(scoreLabels[id]),\r\n    secondaryLabel: getSecondary(scoreLabels[id]),\r\n  };\r\n}\r\n\r\nconst scores = scoreIds.map(createScoreInfo);\r\n\r\nconst fractionDigits = 1;\r\nconst nanScoreText = `–.${''.padEnd(fractionDigits, '–')}`;\r\nconst format = (score: number) => {\r\n  if (Number.isFinite(score))\r\n    return `${(score * 100).toFixed(fractionDigits)}%`;\r\n\r\n  if (score === Number.POSITIVE_INFINITY) return `∞%`;\r\n\r\n  if (score === Number.NEGATIVE_INFINITY) return `−∞%`;\r\n\r\n  return `${nanScoreText}%`;\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"scores\">\r\n    <table class=\"score-table\">\r\n      <tr>\r\n        <td colspan=\"2\" class=\"primary-text header\">\r\n          {{ getPrimary(description).value }}\r\n        </td>\r\n      </tr>\r\n      <template\r\n        v-for=\"{ id, score, primaryLabel, secondaryLabel } in scores\"\r\n        :key=\"id\"\r\n      >\r\n        <tr>\r\n          <td class=\"label-column\">\r\n            <div class=\"primary-text\">{{ primaryLabel.value }}&nbsp;</div>\r\n            <div class=\"secondary-text\">{{ secondaryLabel.value }}</div>\r\n          </td>\r\n          <td class=\"primary-text score-column\">\r\n            <div class=\"score-value\">{{ format(score.value) }}</div>\r\n          </td>\r\n        </tr>\r\n      </template>\r\n      <tr>\r\n        <td colspan=\"2\" class=\"secondary-text footer\">\r\n          {{ getSecondary(description).value }}\r\n        </td>\r\n      </tr>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n.scores {\r\n  display: table;\r\n  table-layout: fixed;\r\n  margin: 44px;\r\n  width: 395px;\r\n  height: 395px;\r\n  background-color: #e10984;\r\n  border-radius: 50%;\r\n  color: white;\r\n  font-size: 20px;\r\n  line-height: 1.2;\r\n  text-transform: uppercase;\r\n  white-space: pre;\r\n  position: absolute;\r\n}\r\n\r\n.score-table {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n}\r\n\r\ntable {\r\n  border-collapse: separate;\r\n  border-spacing: 1ex 0.5em;\r\n}\r\n\r\n.header {\r\n  padding-top: 0.5em;\r\n  padding-bottom: 1em;\r\n}\r\n\r\n.footer {\r\n  padding-top: 1em;\r\n}\r\n\r\ntr:first-child > td,\r\ntr:last-child > td {\r\n  text-align: center;\r\n}\r\n\r\ntd {\r\n  vertical-align: top;\r\n}\r\n\r\n.score-column {\r\n  text-align: right;\r\n}\r\n\r\n.score-value {\r\n  display: inline-block;\r\n  width: 8ex;\r\n  text-align: right;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport type { ElementOf } from 'ts-essentials';\r\n\r\nimport { strict as assert } from 'assert';\r\nimport { onMounted, ref } from 'vue';\r\nimport Sortable from 'sortablejs';\r\n\r\nimport type { Parameters } from '../../ts/circular-economy-model';\r\n\r\nimport { useModelStore } from '../../ts/stores/model';\r\nimport { useParameterTransformsStore } from '../../ts/stores/parameter-transforms';\r\nimport {\r\n  type ParameterTransformState,\r\n  useParameterTransformId,\r\n  useSlotGroupsStore,\r\n} from '../../ts/stores/slot-groups';\r\n\r\nconst { transformedParametersExt } = useModelStore();\r\nconst parameterTransformsStore = useParameterTransformsStore();\r\nconst { slotGroups, nonInternalSlotGroups, internalSlotGroup } =\r\n  useSlotGroupsStore();\r\n\r\nconst newId = ref('');\r\nconst newScript = ref('');\r\n\r\nfunction select({ id }: ParameterTransformState) {\r\n  newId.value = id;\r\n  newScript.value =\r\n    parameterTransformsStore.parameterTransforms.find((pt) => pt.id === id)\r\n      ?.script ?? '';\r\n}\r\n\r\nfunction addOrModify(id: string, script: string) {\r\n  parameterTransformsStore.addOrModify(id, script);\r\n\r\n  const internalIndex = internalSlotGroup.parameterTransforms.findIndex(\r\n    (pt) => pt.id === id,\r\n  );\r\n  if (internalIndex === -1) {\r\n    // The parameter transform is not yet in the internal slot group, so we add it\r\n    const newParameterTransformState: ParameterTransformState =\r\n      useParameterTransformId(id);\r\n    internalSlotGroup.parameterTransforms.push(newParameterTransformState);\r\n  }\r\n}\r\n\r\nfunction remove(id: string) {\r\n  const usedNonInternally =\r\n    nonInternalSlotGroups\r\n      .flatMap(({ parameterTransforms }) => parameterTransforms)\r\n      .findIndex((pt) => pt.id === id) !== -1;\r\n\r\n  if (usedNonInternally) {\r\n    const msg =\r\n      'Cannot remove parameter transform that is still used in a non-internal slot group';\r\n    // eslint-disable-next-line no-alert\r\n    alert(msg);\r\n    return;\r\n  }\r\n\r\n  const nextInternalIndex = () =>\r\n    internalSlotGroup.parameterTransforms.findIndex((pt) => pt.id === id);\r\n\r\n  for (\r\n    let internalIndex = nextInternalIndex();\r\n    internalIndex !== -1;\r\n    internalIndex = nextInternalIndex()\r\n  ) {\r\n    internalSlotGroup.parameterTransforms.splice(internalIndex, 1);\r\n  }\r\n  parameterTransformsStore.remove(id);\r\n}\r\n\r\nfunction move(from: number, to: number) {\r\n  parameterTransformsStore.move(from, to);\r\n}\r\n\r\nfunction deactivateAllInternal() {\r\n  internalSlotGroup.parameterTransforms.forEach((pt) => {\r\n    // eslint-disable-next-line no-param-reassign\r\n    pt.active = false;\r\n  });\r\n}\r\n\r\nconst createTooltip = (\r\n  slotGroup: ElementOf<typeof slotGroups>,\r\n  parameterTransformState: ParameterTransformState,\r\n): string => {\r\n  const slotGroupIndex = slotGroups.findIndex((sg) => sg === slotGroup);\r\n  assert(slotGroupIndex !== -1);\r\n  const slotGroupTransformedParametersExt =\r\n    transformedParametersExt[slotGroupIndex];\r\n\r\n  const parameterTransformIndex = slotGroup.parameterTransforms.findIndex(\r\n    (pts) => pts === parameterTransformState,\r\n  );\r\n  assert(parameterTransformIndex !== -1);\r\n\r\n  const step = slotGroupTransformedParametersExt.steps[parameterTransformIndex];\r\n  const { active, script, diff } = step;\r\n\r\n  const pToS = (p: Partial<Parameters>) => JSON.stringify(p, null, 2);\r\n\r\n  return active\r\n    ? `Diff: ${pToS(diff)}\\n\\nScript:\\n${script}`\r\n    : `Script:\\n${script}`;\r\n};\r\n\r\nconst availableContainer = ref<HTMLDivElement | null>(null);\r\n\r\nonMounted(() => {\r\n  assert(availableContainer.value);\r\n\r\n  Sortable.create(availableContainer.value, {\r\n    onEnd: (event) => {\r\n      const { newDraggableIndex, oldDraggableIndex } = event;\r\n      assert(typeof newDraggableIndex !== 'undefined');\r\n      assert(typeof oldDraggableIndex !== 'undefined');\r\n      move(oldDraggableIndex, newDraggableIndex);\r\n    },\r\n  });\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div id=\"parameter-transforms\" class=\"parameter-transforms\">\r\n    <div>\r\n      Internal (applied first):\r\n      <div ref=\"availableContainer\" class=\"available\">\r\n        <div\r\n          class=\"parameter-transform\"\r\n          v-for=\"pt in internalSlotGroup.parameterTransforms\"\r\n          :key=\"pt.uuid\"\r\n          :id=\"pt.uuid\"\r\n          :data-id=\"pt.id\"\r\n          :title=\"createTooltip(internalSlotGroup, pt)\"\r\n        >\r\n          <label class=\"draggable\">\r\n            <input\r\n              type=\"checkbox\"\r\n              :name=\"pt.id\"\r\n              :value=\"pt.id\"\r\n              v-model=\"pt.active\"\r\n            /><span class=\"draggable\">{{ pt.id }}</span></label\r\n          >\r\n          <span class=\"edit\" @click=\"select(pt)\">✎</span>\r\n        </div>\r\n      </div>\r\n      <br />\r\n      <input\r\n        type=\"button\"\r\n        value=\"Deactivate active internal transforms\"\r\n        @click=\"deactivateAllInternal()\"\r\n      />\r\n    </div>\r\n    <div>\r\n      <div>\r\n        Id:<br />\r\n        <input\r\n          type=\"text\"\r\n          v-model=\"newId\"\r\n          name=\"parameter-transform-id\"\r\n        /><br />\r\n        Script:<br />\r\n        <textarea\r\n          v-model=\"newScript\"\r\n          rows=\"5\"\r\n          cols=\"10\"\r\n          name=\"parameter-transform-script\"\r\n        ></textarea\r\n        ><br />\r\n        <input\r\n          type=\"button\"\r\n          value=\"Add/Modify\"\r\n          @click=\"addOrModify(newId, newScript)\"\r\n        />\r\n        <input type=\"button\" value=\"Delete\" @click=\"remove(newId)\" />\r\n      </div>\r\n      <div class=\"slot-group-transforms\">\r\n        <div\r\n          v-for=\"slotGroup in nonInternalSlotGroups\"\r\n          :key=\"slotGroup.id\"\r\n          :data-id=\"slotGroup.id\"\r\n        >\r\n          <br />\r\n          Slot group '{{ slotGroup.id }}':\r\n          <div class=\"available\">\r\n            <div\r\n              v-for=\"pt in slotGroup.parameterTransforms\"\r\n              :key=\"pt.uuid\"\r\n              :data-id=\"pt.id\"\r\n              :title=\"createTooltip(slotGroup, pt)\"\r\n            >\r\n              <label>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  :name=\"pt.id\"\r\n                  :value=\"pt.id\"\r\n                  v-model=\"pt.active\"\r\n                  disabled\r\n                />{{ pt.id }}</label\r\n              >\r\n              <span class=\"edit\" @click=\"select(pt)\">✎</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style lang=\"scss\">\r\n.parameter-transforms {\r\n  display: flex;\r\n  gap: 2em;\r\n\r\n  & > *:first-child {\r\n    flex-grow: 0;\r\n  }\r\n\r\n  & > *:last-child {\r\n    flex-grow: 3;\r\n\r\n    & input[type='text'],\r\n    & textarea {\r\n      width: 100%;\r\n    }\r\n  }\r\n\r\n  & .available {\r\n    overflow: scroll;\r\n    max-height: 900px;\r\n\r\n    /* Hide scrollbar for Chrome, Safari and Opera */\r\n    &::-webkit-scrollbar {\r\n      display: none;\r\n    }\r\n\r\n    -ms-overflow-style: none; /* IE and Edge */\r\n    scrollbar-width: none; /* Firefox */\r\n    min-width: 300px;\r\n    max-width: 300px;\r\n    min-height: 20px;\r\n    border: solid 1px;\r\n\r\n    & > div {\r\n      outline: solid 1px;\r\n      padding: 0.2ex;\r\n      display: flex;\r\n      flex-wrap: nowrap;\r\n\r\n      & label {\r\n        flex-grow: 1;\r\n      }\r\n\r\n      & label.draggable {\r\n        cursor: grab;\r\n      }\r\n\r\n      & > * {\r\n        white-space: nowrap;\r\n      }\r\n\r\n      & input[type='checkbox'],\r\n      & .edit {\r\n        margin-left: 0.5ex;\r\n        margin-right: 0.5ex;\r\n      }\r\n\r\n      & input[type='checkbox']:not(:disabled),\r\n      & .edit {\r\n        cursor: pointer;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.slot-group-transforms {\r\n  height: 700px;\r\n  overflow: scroll;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { computed } from 'vue';\r\n\r\nimport { useModelStore } from '../../ts/stores/model';\r\nimport { Model } from '../../ts/model';\r\nimport { Scores } from '../../ts/scores';\r\n\r\nconst props = defineProps({ disabled: Boolean });\r\n\r\nconst modelStore = useModelStore();\r\n\r\nconst scores = computed(() => Scores.all(modelStore.record));\r\n\r\nconst createFormatter = (digits: number) => {\r\n  const multiplier = 10 ** digits;\r\n  return (_: string, value: unknown): unknown =>\r\n    typeof value === 'number'\r\n      ? Math.round(value * multiplier) / multiplier\r\n      : value;\r\n};\r\n\r\nconst format2 = createFormatter(2);\r\nconst format3 = createFormatter(3);\r\n</script>\r\n\r\n<template>\r\n  <template v-if=\"!props.disabled\">\r\n    <div class=\"container\">\r\n      <template v-for=\"elementId in Model.elementIds\" :key=\"elementId\">\r\n        <div class=\"preformatted\">\r\n          {{\r\n            `${elementId}: ${JSON.stringify(modelStore.record[elementId], format2, 2)}`\r\n          }}\r\n        </div>\r\n      </template>\r\n      <div class=\"preformatted\">\r\n        {{ `scores: ${JSON.stringify(scores, format3, 2)}` }}\r\n      </div>\r\n    </div>\r\n  </template>\r\n</template>\r\n\r\n<style scoped lang=\"scss\">\r\n.container {\r\n  display: flex;\r\n  flex-flow: column wrap;\r\n  justify-content: flex-start;\r\n  margin-left: 0;\r\n  width: 800px;\r\n  height: 800px;\r\n}\r\n\r\n.preformatted {\r\n  width: 30%;\r\n  font-family: monospace;\r\n  font-size: x-small;\r\n  white-space: pre;\r\n  margin-bottom: 3em;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { ref, toRaw, watch } from 'vue';\r\nimport yaml from 'js-yaml';\r\n\r\nimport type { Config } from '../../ts/config/config-schema';\r\n\r\nimport { useParameterTransformsStore } from '../../ts/stores/parameter-transforms';\r\nimport { useSlotGroupsStore } from '../../ts/stores/slot-groups';\r\nimport { useConfigStore } from '../../ts/stores/config';\r\nimport { useModelStore } from '../../ts/stores/model';\r\nimport { validateConfig } from '../../ts/config/config-schema';\r\nimport { ConfigLoader } from '../../ts/config/config-loader';\r\n\r\nconst { config } = useConfigStore();\r\n\r\nconst parameterTransformsStore = useParameterTransformsStore();\r\nconst { parameterTransforms } = parameterTransformsStore;\r\nconst { rebuildInternalSlotGroup } = useSlotGroupsStore();\r\nconst { initialParameters, transformedParametersExt } = useModelStore();\r\n\r\nconst OState = {\r\n  SUCCESS: 0,\r\n  UNPROCESSED: 1,\r\n  UNKNOWN: 2,\r\n  ERROR: 3,\r\n} as const;\r\ntype State = (typeof OState)[keyof typeof OState];\r\n\r\nconst stateTooltips = {\r\n  [OState.SUCCESS]: 'Successfully imported.',\r\n  [OState.UNPROCESSED]: '',\r\n  [OState.UNKNOWN]: 'Unknown import state. Please check the developer console.',\r\n  [OState.ERROR]: 'Failed to import. Please check the developer console.',\r\n} as const;\r\n\r\nconst parameterTransformsYamlText = ref('');\r\nconst parameterTransformImportState = ref<State>(OState.UNPROCESSED);\r\nconst initialParametersYamlText = ref('');\r\nconst initialParametersImportState = ref<State>(OState.UNPROCESSED);\r\n\r\nfunction deriveConfig(partialConfigText: string): Config | null {\r\n  try {\r\n    const unvalidatedPartialConfig = (yaml.load(partialConfigText) ??\r\n      {}) as object;\r\n    const newConfig = ConfigLoader.merge(\r\n      structuredClone(toRaw(config)),\r\n      unvalidatedPartialConfig,\r\n    );\r\n    const validationResult = validateConfig(newConfig);\r\n\r\n    if (!validationResult.ok) {\r\n      /* eslint-disable no-console */\r\n      const {\r\n        error: { errors, explanation },\r\n      } = validationResult;\r\n      console.error('Invalid configuration:', newConfig);\r\n      console.error(explanation);\r\n      console.error(\r\n        'Issues reported by the configuration validator:',\r\n        ...(errors ?? []),\r\n      );\r\n      return null;\r\n    }\r\n\r\n    return validationResult.data;\r\n  } catch (error) {\r\n    console.error('Failed to parse YAML:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction importInitialParameters() {\r\n  const newConfig = deriveConfig(initialParametersYamlText.value);\r\n  initialParametersImportState.value =\r\n    newConfig === null ? OState.ERROR : OState.UNKNOWN;\r\n  if (!newConfig) return;\r\n\r\n  const {\r\n    model: { initialParameters: validatedInitialParameters },\r\n  } = newConfig;\r\n\r\n  Object.assign(initialParameters, validatedInitialParameters);\r\n\r\n  initialParametersImportState.value = OState.SUCCESS;\r\n}\r\n\r\nasync function importParameterTransforms() {\r\n  const newConfig = deriveConfig(parameterTransformsYamlText.value);\r\n  parameterTransformImportState.value =\r\n    newConfig === null ? OState.ERROR : OState.UNKNOWN;\r\n  if (!newConfig) return;\r\n\r\n  const { parameterTransforms: validatedParameterTransforms } = newConfig;\r\n\r\n  const transformParametersPromise = new Promise((resolve) => {\r\n    watch(transformedParametersExt, resolve, { deep: true, once: true });\r\n  });\r\n\r\n  parameterTransformsStore.replaceAll(validatedParameterTransforms);\r\n  rebuildInternalSlotGroup();\r\n\r\n  await transformParametersPromise;\r\n  parameterTransformImportState.value = OState.SUCCESS;\r\n}\r\n\r\nfunction exportInitialParameters() {\r\n  initialParametersImportState.value = OState.UNPROCESSED;\r\n  const exportObj = {\r\n    model: { initialParameters },\r\n  };\r\n  initialParametersYamlText.value = yaml.dump(exportObj);\r\n  console.log(initialParametersYamlText.value);\r\n}\r\n\r\nfunction exportParameterTransforms() {\r\n  parameterTransformImportState.value = OState.UNPROCESSED;\r\n  const exportObj = {\r\n    parameterTransforms: parameterTransforms.map(({ id, script }) => ({\r\n      id,\r\n      script,\r\n    })),\r\n  };\r\n  parameterTransformsYamlText.value = yaml.dump(exportObj);\r\n  console.log(parameterTransformsYamlText.value);\r\n}\r\n</script>\r\n\r\n<template>\r\n  Initial parameters:<br />\r\n  <textarea\r\n    name=\"initialParametersYamlText\"\r\n    v-model=\"initialParametersYamlText\"\r\n    rows=\"15\"\r\n    cols=\"80\"\r\n    :class=\"{\r\n      success: initialParametersImportState === OState.SUCCESS,\r\n      error: initialParametersImportState === OState.ERROR,\r\n    }\"\r\n    :title=\"stateTooltips[initialParametersImportState]\"\r\n    @input=\"initialParametersImportState = OState.UNPROCESSED\"\r\n  ></textarea>\r\n  <div>\r\n    <input type=\"button\" value=\"Import\" @click=\"importInitialParameters()\" />\r\n    <input type=\"button\" value=\"Export\" @click=\"exportInitialParameters()\" />\r\n  </div>\r\n  <br />\r\n  Parameter transforms:<br />\r\n  <textarea\r\n    name=\"parameterTransformYamlText\"\r\n    v-model=\"parameterTransformsYamlText\"\r\n    rows=\"15\"\r\n    cols=\"80\"\r\n    :class=\"{\r\n      success: parameterTransformImportState === OState.SUCCESS,\r\n      unknown: parameterTransformImportState === OState.UNKNOWN,\r\n      error: parameterTransformImportState === OState.ERROR,\r\n    }\"\r\n    :title=\"stateTooltips[parameterTransformImportState]\"\r\n    @input=\"parameterTransformImportState = OState.UNPROCESSED\"\r\n  ></textarea>\r\n  <div>\r\n    <input type=\"button\" value=\"Import\" @click=\"importParameterTransforms()\" />\r\n    <input type=\"button\" value=\"Export\" @click=\"exportParameterTransforms()\" />\r\n  </div>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n.success {\r\n  background-color: lightgreen;\r\n}\r\n\r\n.unknown {\r\n  background-color: lightyellow;\r\n}\r\n\r\n.error {\r\n  background-color: lightcoral;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport type { ScaleFactors } from '../../ts/stores/visualization';\r\n\r\nimport { HOTKEYS } from '../../ts/builtin-config';\r\nimport { useAppStore } from '../../ts/stores/app';\r\nimport { useModelStore } from '../../ts/stores/model';\r\nimport { useVisualizationStore } from '../../ts/stores/visualization';\r\n\r\nconst uuid = uuidv4();\r\n\r\nconst togglePlayingBtnId = `btn-toggle-playing-${uuid}`;\r\nconst toggleFullscreenBtnId = `btn-toggle-fullscreen-${uuid}`;\r\nconst toggleDeveloperModeBtnId = `btn-toggle-dev-mode-${uuid}`;\r\nconst toggleHighlightDerivativesBtnId = `btn-toggle-highlight-derivatives-${uuid}`;\r\nconst toggleMarkerSlotLabelsBtnId = `btn-toggle-marker-slot-labels-${uuid}`;\r\nconst toggleAutoResetBtnId = `btn-toggle-auto-reset-${uuid}`;\r\n\r\nconst appStore = useAppStore();\r\nconst modelStore = useModelStore();\r\nconst visualizationStore = useVisualizationStore();\r\n\r\nconst togglePlaying = () => appStore.$patch({ isPlaying: !appStore.isPlaying });\r\n\r\nconst toggleFullscreen = () =>\r\n  appStore.$patch({ isFullscreen: !appStore.isFullscreen });\r\n\r\nconst toggleDeveloperMode = () =>\r\n  appStore.$patch({ isDeveloperModeActive: !appStore.isDeveloperModeActive });\r\n\r\nconst toggleHighlightDerivatives = () =>\r\n  appStore.$patch({\r\n    highlightDerivatives: !appStore.highlightDerivatives,\r\n  });\r\n\r\nconst toggleMarkerSlotLabels = () =>\r\n  appStore.$patch({\r\n    showMarkerSlotLabels: !appStore.showMarkerSlotLabels,\r\n  });\r\n\r\nconst resetModel = () => modelStore.reset();\r\n\r\nconst toggleAutoReset = () => {\r\n  appStore.$patch({ autoReset: !appStore.autoReset });\r\n};\r\n\r\nconst scaleFactorKeys = Object.keys(\r\n  visualizationStore.scaleFactors,\r\n) as (keyof ScaleFactors)[];\r\n</script>\r\n\r\n<template>\r\n  <input\r\n    type=\"checkbox\"\r\n    class=\"btn-check\"\r\n    :id=\"togglePlayingBtnId\"\r\n    :class=\"() => (appStore.isFullscreen ? 'active' : '')\"\r\n    autocomplete=\"off\"\r\n    @click=\"togglePlaying\"\r\n  />\r\n  <label class=\"btn btn-primary\" :for=\"togglePlayingBtnId\"\r\n    >Run ({{ HOTKEYS.run.label }})</label\r\n  ><br />\r\n  <input\r\n    type=\"checkbox\"\r\n    class=\"btn-check\"\r\n    :id=\"toggleFullscreenBtnId\"\r\n    :class=\"() => (appStore.isFullscreen ? 'active' : '')\"\r\n    autocomplete=\"off\"\r\n  />\r\n  <label\r\n    class=\"btn btn-primary\"\r\n    :for=\"toggleFullscreenBtnId\"\r\n    @click=\"toggleFullscreen\"\r\n    >Fullscreen ({{ HOTKEYS.fullscreen.label }})</label\r\n  ><br />\r\n  <input\r\n    type=\"checkbox\"\r\n    class=\"btn-check\"\r\n    :id=\"toggleDeveloperModeBtnId\"\r\n    :class=\"() => (appStore.isDeveloperModeActive ? 'active' : '')\"\r\n    autocomplete=\"off\"\r\n  />\r\n  <label\r\n    class=\"btn btn-primary\"\r\n    :for=\"toggleDeveloperModeBtnId\"\r\n    @click=\"toggleDeveloperMode\"\r\n    >Developer mode ({{ HOTKEYS.developerMode.label }})</label\r\n  ><br />\r\n  <input\r\n    type=\"checkbox\"\r\n    class=\"btn-check\"\r\n    :id=\"toggleHighlightDerivativesBtnId\"\r\n    :class=\"() => (appStore.highlightDerivatives ? 'active' : '')\"\r\n    autocomplete=\"off\"\r\n  />\r\n  <label\r\n    class=\"btn btn-primary\"\r\n    :for=\"toggleHighlightDerivativesBtnId\"\r\n    @click=\"toggleHighlightDerivatives\"\r\n    >Highlight derivatives ({{ HOTKEYS.highlightDerivatives.label }})</label\r\n  ><br />\r\n  <input\r\n    type=\"checkbox\"\r\n    class=\"btn-check\"\r\n    :id=\"toggleMarkerSlotLabelsBtnId\"\r\n    :class=\"() => (appStore.showMarkerSlotLabels ? 'active' : '')\"\r\n    autocomplete=\"off\"\r\n  />\r\n  <label\r\n    class=\"btn btn-primary\"\r\n    :for=\"toggleMarkerSlotLabelsBtnId\"\r\n    @click=\"toggleMarkerSlotLabels\"\r\n    >Show marker slot labels</label\r\n  ><br />\r\n  <button type=\"button\" class=\"btn btn-primary\" @click=\"resetModel\">\r\n    Reset model ({{ HOTKEYS.reset.label }})</button\r\n  ><br />\r\n  <input\r\n    type=\"checkbox\"\r\n    class=\"btn-check\"\r\n    :id=\"toggleAutoResetBtnId\"\r\n    :class=\"() => (appStore.autoReset ? 'active' : '')\"\r\n    autocomplete=\"off\"\r\n  />\r\n  <label\r\n    class=\"btn btn-primary\"\r\n    :for=\"toggleAutoResetBtnId\"\r\n    @click=\"toggleAutoReset\"\r\n    >Enable auto-reset</label\r\n  >\r\n  <br />\r\n  <form class=\"scale-factors\">\r\n    <template v-for=\"key in scaleFactorKeys\" :key=\"key\">\r\n      <p>\r\n        <label :for=\"`viz-scale-factors-${key}-${uuid}`\">{{ key }}:</label>\r\n        <input\r\n          type=\"number\"\r\n          :id=\"`viz-scale-factors-${key}-${uuid}`\"\r\n          v-model=\"visualizationStore.scaleFactors[key]\"\r\n        />\r\n      </p>\r\n    </template>\r\n  </form>\r\n</template>\r\n\r\n<style scoped lang=\"scss\">\r\n.btn,\r\n.btn-check {\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.scale-factors {\r\n  display: table;\r\n\r\n  & > p {\r\n    display: table-row;\r\n    & > label {\r\n      display: table-cell;\r\n    }\r\n    & > input {\r\n      display: table-cell;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { ref } from 'vue';\r\n\r\nimport ControlPanelTabInitialParameters from './ControlPanelTabInitialParameters.vue';\r\nimport ControlPanelTabParameterTransforms from './ControlPanelTabParameterTransforms.vue';\r\nimport ControlPanelTabCharts from './ControlPanelTabCharts.vue';\r\nimport ControlPanelTabRawData from './ControlPanelTabRawData.vue';\r\nimport ControlPanelTabImportExport from './ControlPanelTabImportExport.vue';\r\nimport ControlPanelTabMisc from './ControlPanelTabMisc.vue';\r\n\r\nconst props = defineProps({ disabled: Boolean });\r\n\r\nconst diagramsTabDisabled = ref(true);\r\nconst rawDataTabDisabled = ref(true);\r\n</script>\r\n\r\n<template>\r\n  <div :class=\"{ hidden: props.disabled }\">\r\n    <div class=\"control-panel\">\r\n      <nav>\r\n        <div class=\"nav nav-tabs\" id=\"nav-tab\" role=\"tablist\">\r\n          <button\r\n            class=\"nav-link\"\r\n            id=\"nav-initial-parameters-tab\"\r\n            data-bs-toggle=\"tab\"\r\n            data-bs-target=\"#nav-initial-parameters\"\r\n            type=\"button\"\r\n            role=\"tab\"\r\n            aria-controls=\"nav-initial-parameters\"\r\n            aria-selected=\"false\"\r\n          >\r\n            Initial parameters\r\n          </button>\r\n          <button\r\n            class=\"nav-link active\"\r\n            id=\"nav-parameter-transforms-tab\"\r\n            data-bs-toggle=\"tab\"\r\n            data-bs-target=\"#nav-parameter-transforms\"\r\n            type=\"button\"\r\n            role=\"tab\"\r\n            aria-controls=\"nav-parameter-transforms\"\r\n            aria-selected=\"true\"\r\n          >\r\n            Parameter transforms\r\n          </button>\r\n          <button\r\n            class=\"nav-link\"\r\n            id=\"nav-diagrams-tab\"\r\n            data-bs-toggle=\"tab\"\r\n            data-bs-target=\"#nav-diagrams\"\r\n            type=\"button\"\r\n            role=\"tab\"\r\n            aria-controls=\"nav-diagrams\"\r\n            aria-selected=\"false\"\r\n            v-on=\"{\r\n              'hidden.bs.tab': () => (diagramsTabDisabled = true),\r\n              'show.bs.tab': () => (diagramsTabDisabled = false),\r\n            }\"\r\n          >\r\n            Diagrams\r\n          </button>\r\n          <button\r\n            class=\"nav-link\"\r\n            id=\"nav-raw-data-tab\"\r\n            data-bs-toggle=\"tab\"\r\n            data-bs-target=\"#nav-raw-data\"\r\n            type=\"button\"\r\n            role=\"tab\"\r\n            aria-controls=\"nav-raw-data\"\r\n            aria-selected=\"false\"\r\n            v-on=\"{\r\n              'hidden.bs.tab': () => (rawDataTabDisabled = true),\r\n              'show.bs.tab': () => (rawDataTabDisabled = false),\r\n            }\"\r\n          >\r\n            Raw data\r\n          </button>\r\n          <button\r\n            class=\"nav-link\"\r\n            id=\"nav-import-export-tab\"\r\n            data-bs-toggle=\"tab\"\r\n            data-bs-target=\"#nav-import-export\"\r\n            type=\"button\"\r\n            role=\"tab\"\r\n            aria-controls=\"nav-import-export\"\r\n            aria-selected=\"false\"\r\n          >\r\n            Import/Export\r\n          </button>\r\n          <button\r\n            class=\"nav-link\"\r\n            id=\"nav-misc-tab\"\r\n            data-bs-toggle=\"tab\"\r\n            data-bs-target=\"#nav-misc\"\r\n            type=\"button\"\r\n            role=\"tab\"\r\n            aria-controls=\"nav-misc\"\r\n            aria-selected=\"true\"\r\n          >\r\n            Misc\r\n          </button>\r\n        </div>\r\n      </nav>\r\n      <div class=\"tab-content\" id=\"nav-tabContent\">\r\n        <div\r\n          class=\"tab-pane show\"\r\n          id=\"nav-initial-parameters\"\r\n          role=\"tabpanel\"\r\n          aria-labelledby=\"nav-initial-parameters-tab\"\r\n          tabindex=\"0\"\r\n        >\r\n          <ControlPanelTabInitialParameters />\r\n        </div>\r\n        <div\r\n          class=\"tab-pane show active\"\r\n          id=\"nav-parameter-transforms\"\r\n          role=\"tabpanel\"\r\n          aria-labelledby=\"nav-parameter-transforms-tab\"\r\n          tabindex=\"0\"\r\n        >\r\n          <ControlPanelTabParameterTransforms />\r\n        </div>\r\n        <div\r\n          class=\"tab-pane show\"\r\n          id=\"nav-diagrams\"\r\n          role=\"tabpanel\"\r\n          aria-labelledby=\"nav-diagrams-tab\"\r\n          tabindex=\"0\"\r\n        >\r\n          <ControlPanelTabCharts\r\n            :disabled=\"props.disabled || diagramsTabDisabled\"\r\n          />\r\n        </div>\r\n        <div\r\n          class=\"tab-pane show\"\r\n          id=\"nav-raw-data\"\r\n          role=\"tabpanel\"\r\n          aria-labelledby=\"nav-raw-data-tab\"\r\n          tabindex=\"0\"\r\n        >\r\n          <ControlPanelTabRawData\r\n            :disabled=\"props.disabled || rawDataTabDisabled\"\r\n          />\r\n        </div>\r\n        <div\r\n          class=\"tab-pane show\"\r\n          id=\"nav-import-export\"\r\n          role=\"tabpanel\"\r\n          aria-labelledby=\"nav-import-export-tab\"\r\n          tabindex=\"0\"\r\n        >\r\n          <ControlPanelTabImportExport />\r\n        </div>\r\n        <div\r\n          class=\"tab-pane show\"\r\n          id=\"nav-misc\"\r\n          role=\"tabpanel\"\r\n          aria-labelledby=\"nav-misc-tab\"\r\n          tabindex=\"0\"\r\n        >\r\n          <ControlPanelTabMisc />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n.control-panel {\r\n  // this node is designed for 1920x1080 and than scaled up 2x\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  width: calc(1px * var(--app-width) / 4);\r\n  height: 50%;\r\n  box-sizing: border-box;\r\n  border-left: solid 1px;\r\n  background-color: white;\r\n  transform-origin: top right;\r\n  transform: scale(2);\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  & nav {\r\n    padding-top: 1ex;\r\n\r\n    & button[disabled] {\r\n      text-decoration: line-through;\r\n    }\r\n  }\r\n\r\n  & .tab-pane {\r\n    padding: 1em;\r\n  }\r\n\r\n  & .tab-content {\r\n    flex-grow: 2;\r\n    overflow: scroll;\r\n  }\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport type { DeepReadonly } from 'ts-essentials';\r\nimport type { Ref } from 'vue';\r\n\r\nimport { computed } from 'vue';\r\n\r\nimport type { ConditionalLayerConfig } from '../../ts/config/config-schema-types';\r\nimport type { Condition } from '../../ts/util/record-condition';\r\n\r\nimport { useConfigStore } from '../../ts/stores/config';\r\nimport { useModelStore } from '../../ts/stores/model';\r\nimport { compile } from '../../ts/util/record-condition';\r\n\r\nconst props = defineProps<{\r\n  readonly layerConfig: DeepReadonly<ConditionalLayerConfig>;\r\n}>();\r\n\r\nconst { extractAssetPosition, toAssetUrl } = useConfigStore();\r\nconst modelStore = useModelStore();\r\n\r\nfunction compileLayer({ condition, url, reset }: ConditionalLayerConfig): {\r\n  checkCondition: Condition<typeof modelStore.record>;\r\n  condition: string;\r\n  active: Ref<boolean>;\r\n  url: URL;\r\n  x: number;\r\n  y: number;\r\n  reset: boolean;\r\n} {\r\n  const resolvedUrl = toAssetUrl(url);\r\n  const { x, y } = extractAssetPosition(resolvedUrl);\r\n  const checkCondition = compile(condition);\r\n  const active = computed(() => {\r\n    // If the condition does not depend on the record (e.g. it only depends on some global state like the date),\r\n    // the reactive elements of modelStore.record will not be accessed and the condition will never be re-evaluated\r\n    // after the first run. Querying the timestamp of the record object ensures that the condition is re-evaluated\r\n    // whenever the simulation progresses.\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    const { t } = modelStore.record;\r\n    return checkCondition(modelStore.record);\r\n  });\r\n  return {\r\n    checkCondition,\r\n    condition,\r\n    active,\r\n    url: resolvedUrl,\r\n    x,\r\n    y,\r\n    reset: reset ?? false, // FIXME: apply the default during config parsing\r\n  };\r\n}\r\n\r\nconst compiledLayer = compileLayer(props.layerConfig);\r\n</script>\r\n\r\n<template>\r\n  <img\r\n    v-if=\"!compiledLayer.reset || compiledLayer.active.value\"\r\n    :src=\"compiledLayer.url.href\"\r\n    class=\"positioned-layer\"\r\n    :class=\"{ inactive: !compiledLayer.active.value }\"\r\n    :style=\"{\r\n      '--layer-x': compiledLayer.x,\r\n      '--layer-y': compiledLayer.y,\r\n    }\"\r\n    :alt=\"`${compiledLayer.condition} -> ${compiledLayer.url}`\"\r\n  />\r\n</template>\r\n\r\n<style scoped lang=\"scss\">\r\n.positioned-layer {\r\n  position: absolute;\r\n  top: calc(1px * var(--layer-y));\r\n  left: calc(1px * var(--layer-x));\r\n}\r\n\r\n.inactive {\r\n  display: none;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport type { DeepReadonly, Writable } from 'ts-essentials';\r\n\r\nimport { difference } from 'lodash';\r\nimport { ref, computed, watchEffect, watch } from 'vue';\r\nimport { useArrayFilter } from '@vueuse/core';\r\n\r\nimport type { Marker } from '../../ts/stores/marker';\r\nimport type { MarkerSlotConfig } from '../../ts/config/config-schema';\r\n\r\nimport { SLOT_CIRCLE_DIAMETER } from '../../ts/builtin-config';\r\nimport { useConfigStore } from '../../ts/stores/config';\r\nimport { useAppStore } from '../../ts/stores/app';\r\nimport { useMarkerStore } from '../../ts/stores/marker';\r\nimport { useSlotStore } from '../../ts/stores/slot';\r\n\r\nimport { Circle } from '../../ts/util/geometry/circle';\r\n\r\nconst props = defineProps<{\r\n  readonly slotGroupId: string;\r\n  readonly primaryLabel: string;\r\n  readonly secondaryLabel: string;\r\n  readonly activeUrl: string;\r\n  readonly inactiveUrl: string;\r\n  readonly slotConfig: DeepReadonly<MarkerSlotConfig>;\r\n}>();\r\n\r\nconst { slotConfig } = props;\r\n\r\nconst slotGroupId = ref(props.slotGroupId);\r\nconst slotId = `${slotGroupId.value}-${slotConfig.id}`;\r\n\r\nconst { toAssetUrl, extractAssetPosition } = useConfigStore();\r\nconst markerSlotActiveUrl = toAssetUrl(props.activeUrl);\r\nconst markerSlotInactiveUrl = toAssetUrl(props.inactiveUrl);\r\nconst markerSlotActivePosition = extractAssetPosition(markerSlotActiveUrl);\r\nconst markerSlotInactivePosition = extractAssetPosition(markerSlotInactiveUrl);\r\n\r\nconst appStore = useAppStore();\r\n\r\nconst markerStore = useMarkerStore();\r\nconst { markerPositions } = markerStore;\r\n\r\nconst slotStore = useSlotStore();\r\n\r\nconst slotCircle = new Circle(\r\n  slotConfig.x,\r\n  slotConfig.y,\r\n  SLOT_CIRCLE_DIAMETER / 2,\r\n);\r\n\r\nlet previousContainedMarkers = new Array<Marker>();\r\n\r\nconst containedMarkers = useArrayFilter(\r\n  markerPositions as Writable<typeof markerPositions>,\r\n  (m) => slotCircle.containsPoint(m),\r\n);\r\n\r\nwatchEffect(() => {\r\n  const added = difference(containedMarkers.value, previousContainedMarkers);\r\n  const removed = difference(previousContainedMarkers, containedMarkers.value);\r\n  removed.forEach(({ id: markerId }) =>\r\n    slotStore.addActivation({ slotId, markerId }),\r\n  );\r\n  added.forEach(({ id: markerId }) =>\r\n    slotStore.addActivation({ slotId, markerId }),\r\n  );\r\n  previousContainedMarkers = containedMarkers.value;\r\n});\r\n\r\nconst isActive = computed(() => containedMarkers.value.length > 0);\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst emit = defineEmits<{\r\n  activate: [ids: { slotId: string; slotGroupId: string }];\r\n  deactivate: [ids: { slotId: string; slotGroupId: string }];\r\n}>();\r\n\r\nwatch(\r\n  () => isActive.value,\r\n  (isActiveNow, isActivePrev) => {\r\n    if (isActiveNow && !isActivePrev) {\r\n      emit('activate', { slotId, slotGroupId: slotGroupId.value });\r\n    } else {\r\n      emit('deactivate', { slotId, slotGroupId: slotGroupId.value });\r\n    }\r\n  },\r\n);\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    :data-slot-id=\"slotConfig.id\"\r\n    class=\"slot\"\r\n    :style=\"{\r\n      '--slot-x': slotConfig.x,\r\n      '--slot-y': slotConfig.y,\r\n      '--slot-angle': `${slotConfig.angle}deg`,\r\n      '--slot-diameter': SLOT_CIRCLE_DIAMETER,\r\n    }\"\r\n  >\r\n    <div class=\"asset-container\">\r\n      <img\r\n        v-show=\"isActive\"\r\n        :src=\"markerSlotActiveUrl.href\"\r\n        :alt=\"`${slotConfig.id}-active`\"\r\n        :style=\"{\r\n          '--asset-x': markerSlotActivePosition.x,\r\n          '--asset-y': markerSlotActivePosition.y,\r\n        }\"\r\n      />\r\n      <img\r\n        v-show=\"!isActive\"\r\n        :src=\"markerSlotInactiveUrl.href\"\r\n        :alt=\"`${slotConfig.id}-inactive`\"\r\n        :style=\"{\r\n          '--asset-x': markerSlotInactivePosition.x,\r\n          '--asset-y': markerSlotInactivePosition.y,\r\n        }\"\r\n      />\r\n    </div>\r\n    <div\r\n      v-if=\"appStore.isDeveloperModeActive\"\r\n      class=\"circle\"\r\n      :class=\"{ active: isActive, inactive: !isActive }\"\r\n    ></div>\r\n    <div v-if=\"appStore.showMarkerSlotLabels\" class=\"label\">\r\n      <div class=\"primary-text\">{{ props.primaryLabel }}</div>\r\n      <div class=\"secondary-text\">{{ props.secondaryLabel }}</div>\r\n    </div>\r\n    <div v-if=\"appStore.isDeveloperModeActive\" class=\"dev-label\">\r\n      {{ slotGroupId }}<br />{{ slotConfig.id }}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped lang=\"scss\">\r\n.slot {\r\n  left: calc(1px * var(--slot-x));\r\n  top: calc(1px * var(--slot-y));\r\n  width: calc(1px * var(--slot-diameter));\r\n  height: calc(1px * var(--slot-diameter));\r\n  position: absolute;\r\n  transform-origin: center;\r\n  transform: translate(-50%, -50%) rotate(var(--slot-angle));\r\n\r\n  & > .asset-container {\r\n    position: absolute;\r\n    transform: translate(0%, 50%);\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    & > img {\r\n      position: absolute;\r\n      transform: translateX(calc(1px * var(--asset-x)))\r\n        translateY(calc(1px * var(--asset-y)));\r\n    }\r\n  }\r\n\r\n  & > .circle {\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    border-radius: 50%;\r\n    box-sizing: content-box;\r\n    outline: solid 2px;\r\n\r\n    &.inactive {\r\n      outline-color: darkgray;\r\n    }\r\n\r\n    &.active {\r\n      outline-color: black;\r\n    }\r\n  }\r\n\r\n  & .label {\r\n    position: absolute;\r\n    text-align: left;\r\n    text-transform: uppercase;\r\n    white-space: pre-line;\r\n    font-size: 20px;\r\n    color: black;\r\n  }\r\n\r\n  & .dev-label {\r\n    position: absolute;\r\n    background-color: #fffa;\r\n  }\r\n\r\n  * {\r\n    pointer-events: none;\r\n    user-select: none;\r\n  }\r\n\r\n  display: grid;\r\n  place-items: center center;\r\n  font-family: sans-serif;\r\n  font-size: x-large;\r\n  text-align: center;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { computed } from 'vue';\r\n\r\nimport { useConfigStore } from '../../ts/stores/config';\r\nimport { useAppStore } from '../../ts/stores/app';\r\n\r\nconst props = defineProps<{\r\n  readonly url: string;\r\n  readonly label: string;\r\n  active: boolean;\r\n}>();\r\n\r\nconst { toAssetUrl } = useConfigStore();\r\nconst appStore = useAppStore();\r\n\r\nconst assetUrl = computed(() => toAssetUrl(props.url));\r\n\r\n// const position = computed(() => extractAssetPosition(assetUrl.value));\r\n// Keep the position fixed for now\r\nconst position = { x: 0, y: 0 };\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    class=\"action-card\"\r\n    :class=\"{ active: props.active }\"\r\n    :style=\"{\r\n      '--card-x': position.x,\r\n      '--card-y': position.y,\r\n    }\"\r\n  >\r\n    <img :src=\"assetUrl.href\" :alt=\"label\" class=\"image\" />\r\n    <div class=\"label\" v-if=\"appStore.isDeveloperModeActive\">\r\n      <span class=\"highlight\">{{ label }}</span>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped lang=\"scss\">\r\n.action-card {\r\n  --inactive-card-filter: invert(1) brightness(0.4) invert(1);\r\n  position: absolute;\r\n  left: calc(1px * var(--card-x));\r\n  top: calc(1px * var(--card-y));\r\n\r\n  &:not(.active) {\r\n    filter: var(--inactive-card-filter);\r\n  }\r\n\r\n  .image {\r\n    position: relative;\r\n  }\r\n\r\n  .label {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: grid;\r\n    place-items: center center;\r\n    font-family: sans-serif;\r\n    font-size: x-large;\r\n    text-align: center;\r\n  }\r\n\r\n  .highlight {\r\n    background: #fff7;\r\n  }\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport type { DeepReadonly } from 'ts-essentials';\r\n\r\nimport type { CardSlotConfig, CardConfig } from '../../ts/config/config-schema';\r\n\r\nimport { useAppStore } from '../../ts/stores/app';\r\n\r\nimport GameCard from './GameCard.vue';\r\n\r\nconst props = defineProps<{\r\n  readonly cardSlotConfig: DeepReadonly<CardSlotConfig>;\r\n  cardConfig: DeepReadonly<CardConfig> | null;\r\n  active: boolean;\r\n}>();\r\n\r\nconst appStore = useAppStore();\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    :style=\"{\r\n      '--card-x': cardSlotConfig.x,\r\n      '--card-y': cardSlotConfig.y,\r\n      '--card-angle': cardSlotConfig.angle,\r\n    }\"\r\n    class=\"card-slot\"\r\n    :class=\"{ 'dev-mode': appStore.isDeveloperModeActive }\"\r\n  >\r\n    <div class=\"label\" v-if=\"appStore.isDeveloperModeActive\">\r\n      {{ cardSlotConfig.id }}\r\n    </div>\r\n    <template v-if=\"cardConfig !== null\">\r\n      <GameCard\r\n        :url=\"cardConfig.url\"\r\n        :label=\"cardConfig.parameterTransformId\"\r\n        :active=\"props.active\"\r\n      />\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<style scoped lang=\"scss\">\r\n.card-slot {\r\n  position: absolute;\r\n  width: 220px;\r\n  height: 300px;\r\n  transform-origin: top left;\r\n  --card-x-px: calc(1px * var(--card-x));\r\n  --card-y-px: calc(1px * var(--card-y));\r\n  transform: translateX(var(--card-x-px)) translateY(var(--card-y-px))\r\n    rotate(calc(1deg * var(--card-angle)));\r\n\r\n  &.dev-mode {\r\n    background-color: rgba(255, 255, 255, 0.5);\r\n    outline: 2px dotted gray;\r\n  }\r\n\r\n  & > .label {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: grid;\r\n    place-items: center center;\r\n    font-family: sans-serif;\r\n    font-size: x-large;\r\n    text-align: center;\r\n  }\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { ref, watch, watchEffect, onMounted } from 'vue';\r\nimport { onKeyStroke } from '@vueuse/core';\r\n\r\nimport ScaledLetterBox from './ScaledLetterbox.vue';\r\nimport PointerMarkerPanel from './PointerMarkerPanel.vue';\r\nimport TuioMarkerPanel from './TuioMarkerPanel.vue';\r\nimport ScoreTable from './ScoreTable.vue';\r\nimport ControlPanel from './ControlPanel.vue';\r\nimport ConditionalLayer from './ConditionalLayer.vue';\r\nimport BasicSlotGroup from './BasicSlotGroup.vue';\r\nimport ActionCardSlotGroup from './ActionCardSlotGroup.vue';\r\nimport EventCardSlotGroup from './EventCardSlotGroup.vue';\r\nimport ModelVisualization from './ModelVisualization.vue';\r\nimport ResetTimeoutOverlay from './ResetTimeoutOverlay.vue';\r\n\r\nimport { HOTKEYS, BOARD_WIDTH, BOARD_HEIGHT } from '../../ts/builtin-config';\r\nimport { useOptionStore } from '../../ts/stores/options';\r\nimport { useConfigStore } from '../../ts/stores/config';\r\nimport { useAppStore } from '../../ts/stores/app';\r\nimport { useModelStore } from '../../ts/stores/model';\r\nimport { ignorePromise } from '../../ts/util/ignore-promise';\r\nimport { ModelSimulator } from '../../ts/model-simulator';\r\nimport {\r\n  CircularEconomyModel,\r\n  type FlowIds,\r\n  type ParameterIds,\r\n  type StockIds,\r\n  type VariableIds,\r\n} from '../../ts/circular-economy-model';\r\nimport { Runner } from '../../ts/util/runner';\r\n\r\nconst options = useOptionStore();\r\nconst { config } = useConfigStore();\r\nconst appStore = useAppStore();\r\nconst modelStore = useModelStore();\r\n\r\nconst model = new CircularEconomyModel();\r\nconst modelSimulator = new ModelSimulator<\r\n  StockIds,\r\n  FlowIds,\r\n  VariableIds,\r\n  ParameterIds\r\n>(\r\n  model,\r\n  { ...config.model.initialStocks },\r\n  { ...config.model.initialParameters },\r\n  0.0,\r\n  config.simulation.deltaPerSecond,\r\n  config.simulation.maxStepSize,\r\n);\r\n\r\nconst runner = new Runner();\r\n\r\nwatchEffect(() => {\r\n  if (appStore.isPlaying) runner.play();\r\n  else runner.pause();\r\n});\r\n\r\nwatchEffect(() => {\r\n  Object.assign(modelSimulator.parameters, {\r\n    ...modelStore.transformedParameters,\r\n  });\r\n  // eslint-disable-next-line no-console\r\n  console.log('Update model parameters', modelSimulator.parameters);\r\n});\r\n\r\nrunner.tick();\r\n\r\nwatch(\r\n  () => appStore.isFullscreen,\r\n  (isFullscreen) => {\r\n    ignorePromise(\r\n      isFullscreen\r\n        ? document.documentElement.requestFullscreen()\r\n        : document.exitFullscreen(),\r\n    );\r\n  },\r\n);\r\n\r\nconst enableControlPanel = ref(false);\r\n\r\nconst toggleControlPanel = () => {\r\n  enableControlPanel.value = !enableControlPanel.value;\r\n};\r\n\r\nconst toggleDeveloperMode = () => {\r\n  appStore.isDeveloperModeActive = !appStore.isDeveloperModeActive;\r\n};\r\n\r\nconst togglePlayPause = () => {\r\n  appStore.isPlaying = !appStore.isPlaying;\r\n};\r\n\r\nconst toggleFullscreen = () => {\r\n  appStore.isFullscreen = !appStore.isFullscreen;\r\n};\r\n\r\nconst toggleHighlightDerivatives = () => {\r\n  appStore.highlightDerivatives = !appStore.highlightDerivatives;\r\n};\r\n\r\nconst resetModel = modelStore.reset;\r\n\r\nonKeyStroke(HOTKEYS.controlPanel.key, toggleControlPanel);\r\nonKeyStroke(HOTKEYS.developerMode.key, toggleDeveloperMode);\r\nonKeyStroke(HOTKEYS.run.key, togglePlayPause);\r\nonKeyStroke(HOTKEYS.fullscreen.key, toggleFullscreen);\r\nonKeyStroke(HOTKEYS.highlightDerivatives.key, toggleHighlightDerivatives);\r\nonKeyStroke(HOTKEYS.reset.key, resetModel);\r\n\r\nwatchEffect(() => {\r\n  if (appStore.isPlaying) runner.play();\r\n  else runner.pause();\r\n});\r\n\r\nconst modelVisualizations = ref(\r\n  new Array<InstanceType<typeof ModelVisualization>>(),\r\n);\r\nonMounted(() => {\r\n  const tick = (deltaMs: DOMHighResTimeStamp) => {\r\n    /**\r\n     * The current record from the model store can be externally modified,\r\n     * e.g. through the reset function. To ensure that the simulator is in sync,\r\n     * some properties are copied over from the model store to the simulator.\r\n     *\r\n     * TODO: Refactor the simulator such that is uses the global state directly\r\n     *       to make syncing unnecessary.\r\n     */\r\n    const { parameters } = modelSimulator.record;\r\n    Object.assign(modelSimulator.record, modelStore.record, { parameters });\r\n\r\n    const { t: lastT } = modelSimulator.record;\r\n    modelSimulator.tick(deltaMs);\r\n    const { t: currentT } = modelSimulator.record;\r\n    const deltaT = currentT - lastT;\r\n\r\n    const { record } = modelSimulator;\r\n    modelStore.$patch({ record });\r\n    // FIXME: There seems to be a bug in type system for Vue.js components. The type is always `any`.\r\n    // eslint-disable-next-line no-lone-blocks\r\n    {\r\n      /* eslint-disable */\r\n      modelVisualizations.value.forEach((mv) =>\r\n        mv.update(deltaMs, deltaT, modelSimulator.record),\r\n      );\r\n    }\r\n  };\r\n  runner.on('tick', tick);\r\n});\r\n</script>\r\n\r\n<template>\r\n  <ScaledLetterBox\r\n    :target-size=\"{ width: BOARD_WIDTH, height: BOARD_HEIGHT }\"\r\n    class=\"scaled-letterbox\"\r\n    @resize=\"(scale) => (appStore.scale = scale)\"\r\n  >\r\n    <div\r\n      class=\"layer-panel abs-top-left\"\r\n      :style=\"{\r\n        '--app-width': BOARD_WIDTH,\r\n        '--app-height': BOARD_HEIGHT,\r\n      }\"\r\n    >\r\n      <template v-for=\"(layerConfig, index) in config.layers\">\r\n        <ModelVisualization\r\n          v-if=\"layerConfig === 'modelVisualization'\"\r\n          ref=\"modelVisualizations\"\r\n          class=\"model-visualization\"\r\n          :key=\"index\"\r\n        />\r\n        <ConditionalLayer\r\n          v-if=\"layerConfig !== 'modelVisualization'\"\r\n          :layer-config=\"layerConfig\"\r\n          :key=\"index\"\r\n        />\r\n      </template>\r\n      <ScoreTable class=\"score-top-left\" />\r\n      <ScoreTable class=\"score-bottom-right\" />\r\n    </div>\r\n    <div class=\"slot-panel abs-top-left\">\r\n      <template\r\n        v-for=\"slotGroupConfig in config.interaction.slotGroups\"\r\n        :key=\"slotGroupConfig.id\"\r\n      >\r\n        <BasicSlotGroup\r\n          :slot-group-config=\"slotGroupConfig\"\r\n          v-if=\"slotGroupConfig.type === 'basic'\"\r\n        ></BasicSlotGroup>\r\n        <ActionCardSlotGroup\r\n          :slot-group-config=\"slotGroupConfig\"\r\n          v-if=\"slotGroupConfig.type === 'action-card'\"\r\n        ></ActionCardSlotGroup>\r\n        <EventCardSlotGroup\r\n          :slot-group-config=\"slotGroupConfig\"\r\n          v-if=\"slotGroupConfig.type === 'event-card'\"\r\n        ></EventCardSlotGroup>\r\n      </template>\r\n    </div>\r\n    <div class=\"marker-panel abs-top-left\">\r\n      <PointerMarkerPanel v-if=\"options.usePointerMarkers\"></PointerMarkerPanel>\r\n      <TuioMarkerPanel\r\n        v-if=\"options.useTuioMarkers\"\r\n        class=\"pointer-events-fallthrough\"\r\n      ></TuioMarkerPanel>\r\n    </div>\r\n    <ResetTimeoutOverlay v-if=\"appStore.autoReset\" />\r\n    <ControlPanel\r\n      @keydown=\"$event.stopPropagation()\"\r\n      :disabled=\"!enableControlPanel\"\r\n    />\r\n  </ScaledLetterBox>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n.app-background {\r\n  background-color: black;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.layer-panel {\r\n  background-color: white;\r\n}\r\n\r\n.model-visualization {\r\n  width: calc(1px * var(--svg-width));\r\n  transform: scale(var(--svg-scale-factor));\r\n  transform-origin: top left;\r\n}\r\n\r\n.slot-panel,\r\n.marker-panel {\r\n  touch-action: none;\r\n}\r\n\r\n.pointer-events-fallthrough {\r\n  pointer-events: none;\r\n}\r\n\r\n.score {\r\n  position: absolute;\r\n}\r\n\r\n.score-top-left {\r\n  @extend .score;\r\n  top: 0;\r\n  left: 0;\r\n  transform-origin: center;\r\n  transform: rotate(180deg);\r\n}\r\n\r\n.score-bottom-right {\r\n  @extend .score;\r\n  bottom: 0;\r\n  right: 0;\r\n}\r\n</style>\r\n"],"names":[],"version":3,"file":"index.6c7d3277.css.map"}